# Stage 1: Build Stage
# This stage installs all dependencies, including development ones,
# to prepare the application for a production-ready state.
FROM node:20-alpine AS build

# Set the working directory inside the container
WORKDIR /app

# Copy package.json and package-lock.json (or yarn.lock)
COPY package*.json ./

# Install all dependencies (including devDependencies)
RUN npm install

# Copy the rest of your application's source code
COPY . .

# Optional: If you have a build step for your backend (e.g., TypeScript compilation)
# RUN npm run build


# Stage 2: Production Stage
# This stage creates the final, lightweight image for running the application.
FROM node:20-alpine

# Set the working directory
WORKDIR /app

# Copy package.json and package-lock.json again
COPY package*.json ./

# Install only the production dependencies. This is crucial for a smaller image.
RUN npm install --omit=dev

# Copy the application code from the 'build' stage
# This includes any files generated by a build step (like compiled JS from TS)
COPY --from=build /app .

# Expose the port that your Fastify server runs on
# The default for many Node apps is 3000. Change if yours is different.
EXPOSE 3000

# The command to start your Fastify application
# Make sure the path to your entry file (e.g., src/server.js) is correct.
CMD ["node", "src/server.js"]

